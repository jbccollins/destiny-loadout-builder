import { EAspectId } from '@dlb/generated/aspect/EAspectId';
import {
	formatStringForFile,
	getSerializableValue,
} from '@dlb/scripts/generation/utils';
import { IAspect } from '@dlb/types/generation';

export const generateAspectMapping = (aspects: IAspect[]): string => {
	const enumsToSerialize = {
		id: { enumDefinition: EAspectId, enumName: 'EAspectId' },
	};

	const serializeAspects: Record<string, unknown>[] = [];
	aspects.forEach((aspect) => {
		const serializedAspect = { ...aspect } as Record<string, unknown>;
		Object.keys(enumsToSerialize).forEach((key) => {
			const serializedResult = getSerializableValue(
				aspect[key],
				enumsToSerialize[key].enumDefinition,
				enumsToSerialize[key].enumName
			);
			serializedAspect[key] = serializedResult;
		});
		serializeAspects.push(serializedAspect);
	});

	const aspectIdToAspectMappingString = serializeAspects.map(
		(aspect) => `[${aspect.id}]: ${JSON.stringify(aspect, null, 2)},`
	);

	const setDataFileSource = `// This file is generated by the generateAspectMapping.ts script.
	// Do not manually make changes to this file.

	import { EnumDictionary } from "@dlb/types/globals";
	import { IAspect } from "@dlb/types/generation";
  import { EAspectId } from "@dlb/generated/aspect/EAspectId";

	export const AspectIdToAspectMapping: EnumDictionary<EAspectId, IAspect> = {
		${aspectIdToAspectMappingString.join(' ')}
	}
	`;
	return formatStringForFile(setDataFileSource);
};
