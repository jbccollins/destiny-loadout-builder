import { EClassAbilityId } from '@dlb/generated/classAbility/EClassAbilityId';
import {
	formatStringForFile,
	getSerializableValue,
} from '@dlb/scripts/generation/utils';
import { IClassAbility } from '@dlb/types/generation';
import { EDestinySubclassId, EElementId } from '@dlb/types/IdEnums';

export const generateClassAbilityMapping = (
	classAbilities: IClassAbility[]
): string => {
	const enumsToSerialize = {
		id: { enumDefinition: EClassAbilityId, enumName: 'EClassAbilityId' },
		elementId: { enumDefinition: EElementId, enumName: 'EElementId' },
		destinySubclassId: {
			enumDefinition: EDestinySubclassId,
			enumName: 'EDestinySubclassId',
		},
	};

	const serializeClassAbilitys: Record<string, unknown>[] = [];
	classAbilities.forEach((classAbility) => {
		const serializedClassAbility = { ...classAbility } as Record<
			string,
			unknown
		>;
		Object.keys(enumsToSerialize).forEach((key) => {
			const serializedResult = getSerializableValue(
				classAbility[key],
				enumsToSerialize[key].enumDefinition,
				enumsToSerialize[key].enumName
			);
			serializedClassAbility[key] = serializedResult;
		});
		serializeClassAbilitys.push(serializedClassAbility);
	});

	const classAbilityIdToClassAbilityMappingString = serializeClassAbilitys.map(
		(classAbility) =>
			`[${classAbility.id}]: ${JSON.stringify(classAbility, null, 2)},`
	);

	const setDataFileSource = `// This file is generated by the generateClassAbilityMapping.ts script.
	// Do not manually make changes to this file.

	import { EnumDictionary } from "@dlb/types/globals";
	import { IClassAbility } from "@dlb/types/generation";
  import { EClassAbilityId } from "@dlb/generated/classAbility/EClassAbilityId";
	import { EElementId, EDestinySubclassId } from "@dlb/types/IdEnums";

	export const ClassAbilityIdToClassAbilityMapping: EnumDictionary<EClassAbilityId, IClassAbility> = {
		${classAbilityIdToClassAbilityMappingString.join(' ')}
	}
	`;
	return formatStringForFile(setDataFileSource);
};
