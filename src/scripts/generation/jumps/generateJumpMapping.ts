import { EJumpId } from '@dlb/generated/jump/EJumpId';
import {
	formatStringForFile,
	getSerializableValue,
} from '@dlb/scripts/generation/utils';
import { IJump } from '@dlb/types/generation';
import { EDestinySubclassId, EElementId } from '@dlb/types/IdEnums';

export const generateJumpMapping = (jumps: IJump[]): string => {
	const enumsToSerialize = {
		id: { enumDefinition: EJumpId, enumName: 'EJumpId' },
		elementId: { enumDefinition: EElementId, enumName: 'EElementId' },
		destinySubclassId: {
			enumDefinition: EDestinySubclassId,
			enumName: 'EDestinySubclassId',
		},
	};

	const serializeJumps: Record<string, unknown>[] = [];
	jumps.forEach((jump) => {
		const serializedJump = { ...jump } as Record<string, unknown>;
		Object.keys(enumsToSerialize).forEach((key) => {
			const serializedResult = getSerializableValue(
				jump[key],
				enumsToSerialize[key].enumDefinition,
				enumsToSerialize[key].enumName
			);
			serializedJump[key] = serializedResult;
		});
		serializeJumps.push(serializedJump);
	});

	const jumpIdToJumpMappingString = serializeJumps.map(
		(jump) => `[${jump.id}]: ${JSON.stringify(jump, null, 2)},`
	);

	const setDataFileSource = `// This file is generated by the generateJumpMapping.ts script.
	// Do not manually make changes to this file.

	import { EnumDictionary } from "@dlb/types/globals";
	import { IJump } from "@dlb/types/generation";
  import { EJumpId } from "@dlb/generated/jump/EJumpId";
	import { EElementId, EDestinySubclassId } from "@dlb/types/IdEnums";

	export const JumpIdToJumpMapping: EnumDictionary<EJumpId, IJump> = {
		${jumpIdToJumpMappingString.join(' ')}
	}
	`;
	return formatStringForFile(setDataFileSource);
};
